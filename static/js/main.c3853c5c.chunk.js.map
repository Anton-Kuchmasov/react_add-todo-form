{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","components/TodoForm/TodoForm.tsx","types/user.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","completed","title","TodoList","todos","map","username","PostForm","onSubmit","todoId","users","useState","selectedUserId","setSelectedUserId","hasUserIdError","sethasUserIdError","setTitle","hasTitleError","sethasTitleError","handleSubmit","event","userId","preventDefault","trim","length","usersFromServer","find","action","method","htmlFor","type","placeholder","value","onChange","target","disabled","defaultValue","todosToRender","App","setTodos","newTodo","Math","max","ReactDOM","render","document","getElementById"],"mappings":"4NAMaA,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtB,mBAAGC,UAAU,WAAWC,KAAI,wBAAYF,QAAZ,IAAYA,OAAZ,EAAYA,EAAMG,OAA9C,gBACGH,QADH,IACGA,OADH,EACGA,EAAMI,QCFEC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtB,0BACE,UAASA,EAAKC,GACdN,UAAS,mBAAcK,EAAKE,UAAY,sBAAwB,IAFlE,UAIE,oBACEP,UAAU,kBADZ,SAGGK,EAAKG,QAER,cAAC,EAAD,CACET,KAAMM,EAAKN,WCTJU,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,yBAASV,UAAU,WAAnB,SACGU,EAAMC,KAAI,SAAAN,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,GADDA,EAAKC,UCZH,GACb,CACEA,GAAI,EACJH,KAAM,gBACNS,SAAU,OACVV,MAAO,qBAET,CACEI,GAAI,EACJH,KAAM,eACNS,SAAU,YACVV,MAAO,qBAET,CACEI,GAAI,EACJH,KAAM,mBACNS,SAAU,WACVV,MAAO,sBAET,CACEI,GAAI,EACJH,KAAM,mBACNS,SAAU,WACVV,MAAO,6BAET,CACEI,GAAI,EACJH,KAAM,mBACNS,SAAU,SACVV,MAAO,4BAET,CACEI,GAAI,EACJH,KAAM,uBACNS,SAAU,mBACVV,MAAO,2BAET,CACEI,GAAI,EACJH,KAAM,kBACNS,SAAU,eACVV,MAAO,0BAET,CACEI,GAAI,EACJH,KAAM,2BACNS,SAAU,gBACVV,MAAO,wBAET,CACEI,GAAI,EACJH,KAAM,kBACNS,SAAU,WACVV,MAAO,2BAET,CACEI,GAAI,GACJH,KAAM,qBACNS,SAAU,iBACVV,MAAO,2BChDJ,IAAMW,EAA4B,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC5D,EAA4CC,mBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAEA,EAA0BJ,mBAAS,IAAnC,mBAAOT,EAAP,KAAcc,EAAd,KACA,EAA0CL,oBAAS,GAAnD,mBAAOM,EAAP,KAAsBC,EAAtB,KAiBMC,EAAe,SAACC,GCxBjB,IAAqBC,GDyBxBD,EAAME,iBAEApB,EAAMqB,QACVL,GAAiB,GAGdN,GACHG,GAAkB,GAGQ,IAAxBb,EAAMqB,OAAOC,QAAiBZ,KAIlCJ,EAAS,CACPR,GAAIS,EACJP,QACAD,WAAW,EACXoB,OAAQT,EACRnB,MC5CsB4B,ED4CJT,EC3Cfa,EAAgBC,MAAK,SAAAjC,GAAI,OAAIA,EAAKO,KAAOqB,MACzC,QDkBLL,EAAS,IACTH,EAAkB,KA6BpB,OACE,uBAAMc,OAAO,aAAaC,OAAO,OAAOpB,SAAUW,EAAlD,UACE,sBAAKzB,UAAU,QAAf,UACE,uBAAOmC,QAAQ,aAAf,wBACA,uBACEC,KAAK,OACL9B,GAAG,aACH,UAAQ,aACR+B,YAAY,gBACZC,MAAO9B,EACP+B,SAnDkB,SAACb,GACzBJ,EAASI,EAAMc,OAAOF,OACtBd,GAAiB,MAmDZD,GAAiB,sBAAMvB,UAAU,QAAhB,qCAGpB,sBAAKA,UAAU,QAAf,UACE,uBAAOmC,QAAQ,cAAf,uBACA,yBACE,UAAQ,aACR7B,GAAG,cACHgC,MAAOpB,EACPqB,SAzDiB,SAACb,GACxBP,GAAmBO,EAAMc,OAAOF,OAChCjB,GAAkB,IAmDd,UAME,wBAAQiB,MAAM,IAAIG,UAAQ,EAACC,aAAa,IAAxC,2BAIC1B,EAAML,KAAI,SAACZ,GAAD,OACT,wBACEuC,MAAOvC,EAAKO,GADd,SAGGP,EAAKI,aAKXiB,GAAkB,sBAAMpB,UAAU,QAAhB,qCAGrB,wBAAQoC,KAAK,SAAS,UAAQ,eAAeG,SAAUd,EAAvD,qBEpFN,IAAMkB,ECdS,CACb,CACErC,GAAI,EACJE,MAAO,qBACPD,WAAW,EACXoB,OAAQ,GAEV,CACErB,GAAI,GACJE,MAAO,kBACPD,WAAW,EACXoB,OAAQ,GAEV,CACErB,GAAI,EACJE,MAAO,qCACPD,WAAW,EACXoB,OAAQ,IDHiChB,KAAI,SAAAN,GAAI,kCAChDA,GADgD,IAEnDN,MAPmB4B,EAODtB,EAAKsB,OANhBI,EAAgBC,MAAK,SAAAjC,GAAI,OAAIA,EAAKO,KAAOqB,MACzC,QAFT,IAAqBA,KAURiB,EAAM,WACjB,MAA0B3B,mBAAiB0B,GAA3C,mBAAOjC,EAAP,KAAcmC,EAAd,KAgBA,OACE,sBAAK7C,UAAU,MAAf,UACE,+CAEA,cAAC,EAAD,CACEc,SAnBU,SAACgC,GACfD,EAAS,GAAD,mBAAKnC,GAAL,CAAYoC,MAmBhB/B,OAfiB,IAAjBL,EAAMoB,OACD,EAGKiB,KAAKC,IAAL,MAAAD,KAAI,YAAQrC,EAAMC,KAAI,SAAAN,GAAI,OAAIA,EAAKC,QAElC,EAUXU,MAAOe,IAGT,cAAC,EAAD,CAAUrB,MAAOA,QE3CvBuC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c3853c5c.chunk.js","sourcesContent":["import { User } from '../../types/user';\n\ninterface Props {\n  user: User | null;\n}\n\nexport const UserInfo = ({ user }: Props) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/todo';\n\ninterface Props {\n  todo: Todo;\n}\nexport const TodoInfo = ({ todo }: Props) => (\n  <article\n    data-id={todo.id}\n    className={`TodoInfo ${todo.completed ? 'TodoInfo--completed' : ''}`}\n  >\n    <h2\n      className=\"TodoInfo__title\"\n    >\n      {todo.title}\n    </h2>\n    <UserInfo\n      user={todo.user}\n    />\n  </article>\n);\n","import React from 'react';\nimport { Todo } from '../../types/todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { useState } from 'react';\nimport { Todo } from '../../types/todo';\n\nimport { User, getUserById } from '../../types/user';\n\ntype Props = {\n  onSubmit: (todo: Todo) => void;\n  todoId: number;\n  users: User[];\n};\n\nexport const PostForm: React.FC<Props> = ({ onSubmit, todoId, users }) => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [hasUserIdError, sethasUserIdError] = useState(false);\n\n  const [title, setTitle] = useState('');\n  const [hasTitleError, sethasTitleError] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    sethasTitleError(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n    sethasUserIdError(false);\n  };\n\n  const reset = () => {\n    setTitle('');\n    setSelectedUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!(title.trim())) {\n      sethasTitleError(true);\n    }\n\n    if (!selectedUserId) {\n      sethasUserIdError(true);\n    }\n\n    if (title.trim().length === 0 || !selectedUserId) {\n      return;\n    }\n\n    onSubmit({\n      id: todoId,\n      title,\n      completed: false,\n      userId: selectedUserId,\n      user: getUserById(selectedUserId),\n    });\n\n    reset();\n  };\n\n  return (\n    <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n      <div className=\"field\">\n        <label htmlFor=\"text-input\">Title:&nbsp;</label>\n        <input\n          type=\"text\"\n          id=\"text-input\"\n          data-cy=\"titleInput\"\n          placeholder=\"Enter a title\"\n          value={title}\n          onChange={handleTitleChange}\n        />\n        {hasTitleError && <span className=\"error\">Please enter a title</span>}\n      </div>\n\n      <div className=\"field\">\n        <label htmlFor=\"select-list\">User:&nbsp;</label>\n        <select\n          data-cy=\"userSelect\"\n          id=\"select-list\"\n          value={selectedUserId}\n          onChange={handleUserChange}\n        >\n          <option value=\"0\" disabled defaultValue=\"0\">\n            Choose a user\n          </option>\n\n          {users.map((user: User) => (\n            <option\n              value={user.id}\n            >\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {hasUserIdError && <span className=\"error\">Please choose a user</span>}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\" onChange={handleSubmit}>\n        Add\n      </button>\n    </form>\n  );\n};\n","import usersFromServer from '../api/users';\n\nexport type User = {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n};\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId)\n      || null;\n}\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nimport { Todo } from './types/todo';\nimport { PostForm } from './components/TodoForm/TodoForm';\n\nfunction getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId)\n      || null;\n}\n\nconst todosToRender:Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosToRender);\n\n  const addTodo = (newTodo: Todo) => {\n    setTodos([...todos, newTodo]);\n  };\n\n  const getIdOnTodo = () => {\n    if (todos.length === 0) {\n      return 1;\n    }\n\n    const maxId = Math.max(...todos.map(todo => todo.id));\n\n    return maxId + 1;\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <PostForm\n        onSubmit={addTodo}\n        todoId={getIdOnTodo()}\n        users={usersFromServer}\n      />\n\n      <TodoList todos={todos} />\n\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}